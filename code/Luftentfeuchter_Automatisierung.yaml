blueprint:
  name: test1234
  description: Automatisierung zur Steuerung eines Luftentfeuchters basierend auf Innen- und Außentemperatur sowie Luftfeuchtigkeit.
  domain: automation
  input:
    indoor_humidity_sensors:
      name: Innen Luftfeuchtigkeitssensoren
      description: Wähle eine oder mehrere Sensoren für die Innen-Luftfeuchtigkeit.
      selector:
        entity:
          domain: sensor
          multiple: true
    indoor_temperature_sensors:
      name: Innen Temperatursensoren
      description: Wähle die zu den Luftfeuchtigkeitssensoren passenden Temperatursensoren.
      selector:
        entity:
          domain: sensor
          multiple: true
    outdoor_humidity_sensors:
      name: Außen Luftfeuchtigkeitssensor
      description: Wähle eine oder mehrere Sensoren für die Außen-Luftfeuchtigkeit.
      selector:
        entity:
          domain: sensor
          multiple: true
    outdoor_temperature_sensors:
      name: Außen Temperatursensor
      description: Wähle die zu den Luftfeuchtigkeitssensoren passenden Temperatursensoren.
      selector:
        entity:
          domain: sensor
          multiple: true
    dehumidifier_switch:
      name: Schalter für Luftentfeuchter
      description: Schalter zum Ein-/Ausschalten des Luftentfeuchters.
      selector:
        entity:
          domain: switch
    window_sensors:
      name: Fenstersensor
      description: Wähle eine oder mehrere Fenstersensoren.
      selector:
        entity:
          domain: binary_sensor
          multiple: true

variables:
  indoor_humidity_entities: !input indoor_humidity_sensors
  indoor_temperature_entities: !input indoor_temperature_sensors
  outdoor_humidity_entities: !input outdoor_humidity_sensors
  outdoor_temperature_entities: !input outdoor_temperature_sensors
  dehumidifier_entity: !input dehumidifier_switch
  window_entities: !input window_sensors

  max_humidity_warm: "{{ states('input_number.max_humidity_warm') | float }}"
  min_humidity_warm: "{{ states('input_number.min_humidity_warm') | float }}"
  max_humidity_cold: "{{ states('input_number.max_humidity_cold') | float }}"
  min_humidity_cold: "{{ states('input_number.min_humidity_cold') | float }}"
  manual_override_entity: "{{ states('input_boolean.manual_cold_weather_override') | bool }}"

trigger:
  - platform: time_pattern
    minutes: "/5"  # Trigger alle 5 Minuten
  - platform: state
    entity_id: !input window_sensors
    to: "on"  # Trigger nur wenn ein Fenster geöffnet wird
    from: "off"  # Trigger nur, wenn der Zustand von 'off' auf 'on' wechselt

action:
  - variables:
      fensteroffen: >
        {{ expand(window_entities) | selectattr('state', 'eq', 'on') | list | length > 0 }}

      # Berechnung des höchsten Taupunkts der Innenwerte
      taupunkte: >
        {% set taupunkte = [] %}
        {% for i in range(indoor_humidity_entities | count) %}
          {% set humidity = states(indoor_humidity_entities[i]) | float %}
          {% set temperature = states(indoor_temperature_entities[i]) | float %}
          {% set taupunkt = (243.12 * ((log(humidity / 100)) + ((17.62 * temperature) / (243.12 + temperature)))) /
                            (17.62 - ((log(humidity / 100)) + ((17.62 * temperature) / (243.12 + temperature)))) %}
          {% set taupunkte = taupunkte + [taupunkt] %}
        {% endfor %}
        {{ taupunkte }}

      mittlere_luftfeuchtigkeit: >
        {% set feuchtigkeiten = indoor_humidity_entities | map('states') | map('float') | list %}
        {{ feuchtigkeiten | sum / feuchtigkeiten | length }}

      mittlere_temperatur: >
        {% set temperaturen = indoor_temperature_entities | map('states') | map('float') | list %}
        {{ temperaturen | sum / temperaturen | length }}

      hoechster_taupunkt: "{{ taupunkte | max }}"

      # Berechnung der mittleren Außentemperatur
      mittlere_aussen_temperatur: >
        {% set temperaturen = outdoor_temperature_entities | map('states') | map('float') | list %}
        {{ temperaturen | sum / temperaturen | length }}

      # Berechnung der mittleren Außen-Luftfeuchtigkeit
      mittlere_aussen_humidity: >
        {% set feuchtigkeiten = outdoor_humidity_entities | map('states') | map('float') | list %}
        {{ feuchtigkeiten | sum / feuchtigkeiten | length }}

      ist_kaltes_wetter: >
        {% if manual_override_entity %}
            true
        {% else %}
            {{ (hoechster_taupunkt | float(default=0)) > (mittlere_aussen_temperatur | float(default=0)) }}
        {% endif %}
        
      max_humidity: "{{ max_humidity_cold if ist_kaltes_wetter else max_humidity_warm }}"
      min_humidity: "{{ min_humidity_cold if ist_kaltes_wetter else min_humidity_warm }}"

  - if:
      - condition: template
        value_template: "{{ not fensteroffen }}"
    then:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ mittlere_luftfeuchtigkeit > max_humidity }}"
            sequence:
              - service: switch.turn_on
                target:
                  entity_id: !input dehumidifier_switch

          - conditions:
              - condition: template
                value_template: "{{ mittlere_luftfeuchtigkeit < min_humidity }}"
            sequence:
              - service: switch.turn_off
                target:
                  entity_id: !input dehumidifier_switch
    else:
      - service: switch.turn_off
        target:
          entity_id: !input dehumidifier_switch
